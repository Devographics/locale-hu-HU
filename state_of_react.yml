locale: hu-HU
translations:
  ###########################################################################
  # General
  ###########################################################################

  - key: general.state_of_react.intro
    t: |
      A React már egy ideje elérhető, és most már tisztán látszik, hogy az egyik legdominánsabb frontendes keretrendszer lett belőle.

      És most még inkább mint ezelőtt, a React nagyon gyorsan fejlődik és a fejlesztői közösség mindent meg tesz az érdekében, hogy ne maradjon le.

      A State of React fejlesztői felméréssel azt reméljük, hogy meg tudjuk érteni általa ezt az evolúciót és segíthetünk a fejlesztőknek a React ökoszisztémában navigálni.

  - key: general.state_of_react.description
    t: A React ökoszisztéma éves fejlesztői felmérése

  - key: features.features_intro_react
    t: |
      Üdv a kérdőívben! Ez az első rész többnyire arról szól, hogy megértsük, hogy mennyire vagy jártas a React APIkban és a használatában.

      Egyébként ha bármit szeretnél hozzáfűzni a válaszokhoz, kattints a kis "komment" ikonra.

  - key: tools.tools_intro_react
    t: |
      A következő szekciók a **könyvtárakra** és a **keretrendszerekre** fókuszál, amik a React ökoszisztémába tartoznak bele.
      Mondd el nekünk, mi hoz lázba!

  # sections
  - key: sections.main_apis.title
    t: Fő APIk
  - key: sections.main_apis.description
    t: Stabil, meglévő React funkciók

  - key: sections.hooks.title
    t: Horgok
  - key: sections.hooks.description
    t: A React beépített horgai

  - key: sections.new_apis.title
    t: New APIs
  - key: sections.new_apis.description
    t: Newly-introduced or experimental features

  - key: sections.component_libraries.title
    t: Component Libraries
  - key: sections.component_libraries.description
    t: The building blocks of your front-end

  # - key: sections.data_management.title
  #   t: Data Management
  # - key: sections.data_management.description
  #   t: Loading and managing application data

  - key: sections.state_management.title
    t: Állapotmenedzsment
  - key: sections.state_management.description
    t: Állapotmenedzsment könyvtárak
  - key: sections.data_loading.title
    t: Adatbetöltés
  - key: sections.data_loading.description
    t: Eszközök adatok betöltésére és menedzselésére

  - key: sections.back_end_infrastructure.title
    t: Back-End & Infrastructure
  - key: sections.back_end_infrastructure.description
    t: Bundling & serving your app

  # - key: sections.usage.title
  #   t: Back-End & Infrastructure
  # - key: sections.usage.description
  #   t: Bundling & serving your app

  # old sections

  # - key: sections.ui_libraries.title
  #   t: UI Libraries
  # - key: sections.ui_libraries.description
  #   t: Component libraries and other UI toolkits.

  # - key: sections.meta_frameworks.title
  #   t: Meta Frameworks
  # - key: sections.meta_frameworks.description
  #   t: Frameworks that help render and serve your React app

  # - key: sections.testing.title
  #   t: Testing
  # - key: sections.testing.description
  #   t: Testing utilities and libraries

  - key: sections.other_tools.title
    t: Egyéb eszközök
  - key: sections.other_tools.description
    t: Egyéb React eszközök és könyvtárak

  - key: sections.usage_react.title
    t: Használat
  - key: sections.usage_react.description
    t: Hogyan használod a React-et a mindennapokban

  - key: tools.data_loading_heading
    t: Data Loading Libraries

  - key: tools.state_management_heading
    t: State Management Libraries

  # features

  - key: features.main_apis_pain_points
    t: Main APIs Pain Points
  - key: features.main_apis_pain_points.question
    t: What pain points have you encountered related to the APIs mentioned above?

  - key: features.hooks_pain_points
    t: Hooks Pain Points
  - key: features.hooks_pain_points.question
    t: What pain points have you encountered with hooks?

  - key: features.new_apis_pain_points
    t: New APIs Pain Points
  - key: features.new_apis_pain_points.question
    t: What pain points have you encountered related to new APIs?

  # main features
  - key: features.fragment.description
    t: >
      `<Fragment>`, often used via `<>...</>` syntax, lets you group elements without a wrapper node.
  - key: features.profiler.description
    t: >
      `<Profiler>` lets you measure rendering performance of a React tree programmatically.
  - key: features.strictmode.description
    t: >
      `<StrictMode>` lets you find common bugs in your components early during development.

  - key: features.createportal.description
    t: >
      `createPortal` lets you render some children into a different part of the DOM.

  - key: features.createcontext.description
    t: >
      `createContext` lets you create a context that components can provide or read.

  - key: features.forwardref.description
    t: >
      `forwardRef` lets your component expose a DOM node to parent component with a ref.

  - key: features.lazy.description
    t: >
      `lazy` lets you defer loading component’s code until it is rendered for the first time.

  - key: features.memo.description
    t: >
      `memo` lets you skip re-rendering a component when its props are unchanged.

  - key: features.createroot.description
    t: >
      `createRoot` lets you create a root to display React components inside a browser DOM node.

  - key: features.hydrateroot.description
    t: >
      `hydrateRoot` lets you display React components inside a browser DOM node whose HTML content was previously generated by `react-dom/server`.

  # hooks

  - key: features.usecallback.description
    t: >
      `useCallback` is a React Hook that lets you cache a function definition between re-renders.

  - key: features.usecontext.description
    t: >
      `useContext` is a React Hook that lets you read and subscribe to context from your component.

  - key: features.usedebugvalue.description
    t: >
      `useDebugValue` is a React Hook that lets you add a label to a custom Hook in React DevTools.

  - key: features.usedeferredvalue.description
    t: >
      `useDeferredValue` is a React Hook that lets you defer updating a part of the UI.

  - key: features.useeffect.description
    t: >
      `useEffect` is a React Hook that lets you synchronize a component with an external system.

  - key: features.useid.description
    t: >
      `useId` is a React Hook for generating unique IDs that can be passed to accessibility attributes.

  - key: features.usememo.description
    t: >
      `useMemo` is a React Hook that lets you cache the result of a calculation between re-renders.

  - key: features.usereducer.description
    t: >
      `useReducer` is a React Hook that lets you add a reducer to your component.

  - key: features.useref.description
    t: >
      `useRef` is a React Hook that lets you reference a value that’s not needed for rendering.

  - key: features.usestate.description
    t: >
      `useState` is a React Hook that lets you add a state variable to your component.

  - key: features.usesyncexternalstore.description
    t: >
      `useSyncExternalStore` is a React Hook that lets you subscribe to an external store.

  - key: features.usetransition.description
    t: >
      `useTransition` is a React Hook that lets you update the state without blocking the UI.

  # new features

  - key: features.suspense.description
    t: >
      `<Suspense>` lets you display a fallback until its children have finished loading.

  - key: features.use_hook.description
    t: >
      `use` is a React Hook that lets you read the value of a resource like a Promise or context.

  - key: features.usetransition.description
    t: >
      `useTransition` is a React Hook that lets you update the state without blocking the UI.

  - key: features.starttransition.description
    t: >
      `startTransition` lets you update the state without blocking the UI.

  - key: features.react_server_components.description
    t: >
      Components that run exclusively on the server.

  - key: features.use_client.description
    t: >
      `'use client'` marks source files whose components execute on the client.

  - key: features.use_server.description
    t: >
      `'use server'` marks server-side functions that can be called from client-side code.

  - key: features.server_actions.description
    t: >
      React's built-in solution for server mutations.

  - key: features.taint_api.description
    t: >
      Prevent a specific object or value from being passed to a Client Component.

  - key: features.cache.description
    t: >
      `cache` lets you cache the result of a data fetch or computation.

  - key: features.useformstatus.description
    t: >
      `useFormStatus` is a Hook that gives you status information of the last form submission.

  - key: features.useformstate.description
    t: >
      `useFormState` is a Hook that allows you to update state based on the result of a form action.

  # tools

  - key: tools.component_libraries_others
    t: Other Libraries
  - key: tools.component_libraries_others.question
    t: What other component libraries have you used?

  - key: tools.component_libraries_pain_points
    t: Component Pain Points
  - key: tools.component_libraries_pain_points.question
    t: What pain points have you encountered related to working with components?

  # - key: tools.ui_libraries_happiness
  #   t: Happiness
  # - key: tools.ui_libraries_happiness.description
  #   t: How happy are you with the state of UI libraries?

  - key: tools.state_management_others
    t: Other State Management Libraries
  - key: tools.state_management_others.question
    t: What other libraries have you used to manage state in your apps?

  - key: tools.state_management_pain_points
    t: State Management Pain Points
  - key: tools.state_management_pain_points.question
    t: What pain points have you encountered related to state management?

  # - key: tools.state_management_happiness
  #   t: Happiness
  # - key: tools.state_management_happiness.description
  #   t: How happy are you with the available state management libraries?

  - key: tools.data_loading_others
    t: Other Data Loading Libraries
  - key: tools.data_loading_others.question
    t: What other libraries have you used for data loading?

  - key: tools.data_loading_pain_points
    t: Data Loading Pain Points
  - key: tools.data_loading_pain_points.question
    t: What pain points have you encountered related to data loading?

  # - key: tools.data_loading_happiness
  #   t: Happiness
  # - key: tools.data_loading_happiness.description
  #   t: How happy are you with the state of data loading libraries?

  - key: tools.meta_frameworks_others
    t: Other Meta-Frameworks
  # - key: tools.meta_frameworks_happiness
  #   t: Happiness
  # - key: tools.meta_frameworks_happiness.description
  #   t: How happy are you with the current state of meta-frameworks?

  - key: tools.meta_frameworks_heading
    t: Meta-Frameworks

  - key: tools.other_back_end_tools_heading
    t: Other Back-End Tools & Services

  - key: tools.back_end_infrastructure_pain_points
    t: Back-End Pain Points
  - key: tools.back_end_infrastructure_pain_points.question
    t: What pain points have you encountered related to back-end and infrastructure?

  - key: other_tools.testing
    t: Testing Libraries
  - key: other_tools.testing.question
    t: Which libraries do you use to test your React apps?

  # - key: tools.testing_happiness
  #   t: Happiness
  # - key: tools.testing_happiness.description
  #   t: How happy are you with the current state of testing libraries?

  - key: other_tools.mobile_development
    t: Mobile Development
  - key: other_tools.mobile_development.question
    t: Which libraries have you used for mobile development?

  # - key: tools.mobile_development_others
  #   t: Other Mobile Development Tools
  # - key: tools.mobile_development_happiness
  #   t: Happiness
  # - key: tools.mobile_development_happiness.description
  #   t: How happy are you with the current state of mobile development?

  # other tools
  - key: other_tools.form_libraries
    t: Form Libraries
  # - key: other_tools.form_libraries.description
  #   t: Libraries for generating and validating forms.
  - key: other_tools.form_libraries.question
    t: Which libraries have you used to manage forms?
  - key: options.form_libraries.na
    t: None

  - key: other_tools.build_tools
    t: Build Tools
  # - key: other_tools.build_tools.description
  #   t: Build tools and bundlers.
  - key: other_tools.build_tools.question
    t: Which build tools and bundlers have you used?

  - key: other_tools.animation_libraries
    t: Animation
  # - key: other_tools.animation.description
  #   t: Libraries to help manage animations and transitions.
  - key: other_tools.animation_libraries.question
    t: Which animation libraries have you used?

  - key: other_tools.auth
    t: Bejelentkezés/hitelesítés
  # - key: other_tools.auth.description
  #   t: Libraries and services for managing authentication and accounts.
  - key: other_tools.auth.question
    t: Which libraries and services have you used to handle authentication?

  - key: other_tools.data_visualization_libraries
    t: Data Visualization
  # - key: other_tools.data_visualization.description
  #   t: Data visualization and graphics libraries.
  - key: other_tools.data_visualization_libraries.question
    t: Which data visualization and graphics libraries have you used?

  - key: other_tools.css_tools
    t: CSS eszközök és könyvtárak
  # - key: other_tools.css_tools.description
  #   t: CSS libraries, frameworks, and utilities you use to style your React app.
  - key: other_tools.css_tools.question
    t: Which libraries or frameworks have you used to style your React apps?

  - key: other_tools.other_frontend_frameworks
    t: Egyéb Front-end keretrendszerek
  # - key: other_tools.other_frontend_frameworks.description
  #   t: >
  #     Other front-end frameworks
  - key: other_tools.other_frontend_frameworks.question
    t: >
      Which other front-end frameworks have you used?

  - key: other_tools.hosting
    t: Hoszting szolgáltatások
  # - key: other_tools.hosting.description
  #   t: Services you use to host your React apps.
  - key: other_tools.hosting.question
    t: Which of services have you used to host your React apps?

  - key: other_tools.backend_language
    t: Back-end nyelvek
  - key: other_tools.backend_language.question
    t: Which language(s) are your back-end apps written in?

  - key: other_tools.other_services
    t: Egyéb szolgáltatások
  - key: other_tools.other_services.question
    t: What other services have you used with your React apps?

  - key: other_tools.validation
    t: Séma és validációs könyvtárak
  - key: other_tools.validation.question
    t: Which libraries have you used for validating data against a schema?

  - key: other_tools.ai_tools
    t: AI eszközök (Mesterséges Intelligencia / MI)
  - key: other_tools.ai_tools.question
    t: What AI tools or services have you used to help you write React code?

  - key: other_tools.renderers
    t: React renderelők
  - key: other_tools.renderers.question
    t: Which libraries have you used to render React to different platforms or environments?

  - key: other_tools.other_tools
    t: Egyéb eszközök
  - key: other_tools.other_tools.question
    t: What other tools have you used to develop React apps?

  # CSS
  - key: options.css_tools.plain_css
    t: CSS (sima, “vanilla” CSS)

  # react pain points

  - key: options.react_pain_points.rerenders
    t: Komponensek újrarenderelésének kezelése
  - key: options.react_pain_points.testing
    t: Tesztelés
  - key: options.react_pain_points.data_loading
    t: Adatbetöltés és async operációk
  - key: options.react_pain_points.state_management
    t: Állapotmenedzsment (`useState`, Redux, Context, stb.)
  - key: options.react_pain_points.bundle_sizes
    t: A kliens oldali kódcsomag méretének korlátozása
  - key: options.react_pain_points.server_rendering
    t: Szerver-oldai renderelés és szerver komponensek
  - key: options.react_pain_points.css_styling
    t: CSS & stilizálás
  - key: options.react_pain_points.attribute_names
    t: “Rossz” attribútumnevek, mint például `className`, `htmlFor`, stb.
  - key: options.react_pain_points.synthetic_events
    t: Szintetikus események
  - key: options.react_pain_points.ref_management
    t: Ref menedzselés
  - key: options.react_pain_points.memoization
    t: Memoizáció
  - key: options.react_pain_points.animations
    t: Animációk és átmenetek
  - key: options.react_pain_points.forms
    t: Űrlapok
  - key: options.react_pain_points.typescript
    t: A hivatalos TypeScript támogatás hiánya

  # usage type
  - key: usage.react_usage_type
    t: React használat
  - key: usage.react_usage_type.question
    t: Milyen kontextusban használod a React-et többnyire?

  # react version

  - key: usage.react_version
    t: React verziók
  - key: usage.react_version.question
    t: A React mely verzióit használod nap mint nap?

  - key: options.react_version.react_v16x
    t: 16.x
  - key: options.react_version.react_v17x
    t: 17.x
  - key: options.react_version.react_v18x
    t: 18.x
  - key: options.react_version.react_canary
    t: Canary
  - key: options.react_version.not_sure
    t: Nem vagyok benne biztos

  # JS App Patterns

  - key: usage.js_app_patterns
    t: Applikációs minták
  - key: usage.js_app_patterns.question
    t: A következők közül melyik architektúrális és renderelési mintákat használad **az elmúlt egy évben**?

  - key: options.js_app_patterns.single_page_app
    t: Single Page Application (SPA) (Egyoldalas applikáció)
  - key: options.js_app_patterns.single_page_app.description
    t: Appok amik teljes egészében a böngészőben futnak
  - key: options.js_app_patterns.multiple_page_app
    t: Multi-Page Application (MPA) (Többoldalas applikáció)
  - key: options.js_app_patterns.multiple_page_app.description
    t: Appok amik teljes egészében a szerveren futnak, minimális kliens-oldali dinamikus viselkedéssel
  - key: options.js_app_patterns.static_site_generation
    t: Static Site Generation (SSG) (Statikus generált weboldal)
  - key: options.js_app_patterns.static_site_generation.description
    t: Előre renderelt statikus tartalom, kliens-oldali dinamikus elemekkel vagy anélkül
  - key: options.js_app_patterns.server_side_rendering
    t: Server-Side Rendering (SSR) (Szerver-oldali renderelés)
  - key: options.js_app_patterns.server_side_rendering.description
    t: A HTML tartalom dinamikus renderelése a szerveren, mielőtt a kliens rehidratálná
  - key: options.js_app_patterns.partial_hydration
    t: Részleges hidratálás
  - key: options.js_app_patterns.partial_hydration.description
    t: Csak néhány komponens hidratálásra a kliensen (pl. React szerver-oldali komponensek)
  - key: options.js_app_patterns.progressive_rehydration
    t: Progresszív hidratálás
  - key: options.js_app_patterns.progressive_rehydration.description
    t: A kliensen a komponensek hidratálási sorrendjének szabályozása
  - key: options.js_app_patterns.islands_architecture
    t: Sziget architektúra
  - key: options.js_app_patterns.islands_architecture.description
    t: A dinamikus viselkedés elszigetelt szigetei több belépési ponttal egy egyébként statikus oldalon (Astro, Eleventy)
  - key: options.js_app_patterns.progressive_enhancement
    t: Progresszív fejlesztés
  - key: options.js_app_patterns.progressive_enhancement.description
    t: Biztosra menni, hogy egy app Javascrpt nélkül is működik
  - key: options.js_app_patterns.incremental_static_generation
    t: Inkrementális statikus generáció
  - key: options.js_app_patterns.incremental_static_generation.description
    t: A statikus webhely dinamikus bővítése vagy módosítása a kezdeti összeállítás után is (Next.js ISR, Gatsby DSG)
  - key: options.js_app_patterns.streaming_ssr
    t: Streaming SSR
  - key: options.js_app_patterns.streaming_ssr.description
    t: A szerver által megjelenített tartalom kisebb streamelt darabokra bontása
  - key: options.js_app_patterns.resumability
    t: Újraindíthatóság
  - key: options.js_app_patterns.resumability.description
    t: A keretrendszer állapotának sorba állítása a kiszolgálón, hogy az ügyfél folytathassa a végrehajtást duplikált kódvégrehajtás nélkül.
  - key: options.js_app_patterns.edge_rendering
    t: Edge Rendering
  - key: options.js_app_patterns.edge_rendering.description
    t: A renderelt HTML módosítása a szélén, mielőbb a kliensnek küldené

  - key: options.js_app_patterns.micro_frontend
    t: Micro Frontend
  - key: options.js_app_patterns.domain_driven_design
    t: Domain-Driven Design (Domain-vezérelt tervezés)
  - key: options.js_app_patterns.serverless
    t: Serverless (Szerver nélküli)
  - key: options.js_app_patterns.pespa
    t: PESPA

  - key: usage.what_do_you_use_react_for
    t: React Usage
  - key: usage.what_do_you_use_react_for.question
    t: Mire használod a React-et?

  - key: usage.react_pain_points
    t: A React hiányosságai

  - key: usage.state_of_react
    t: Happiness
  - key: usage.state_of_react.question
    t: Mennyire vagy elégedett a React jelenlegi állapotával?

  - key: usage.usage_pain_points
    t: Other Pain Points
  - key: usage.usage_pain_points.question
    t: Any other React pain points that you would like to mention?

  # new features
  - key: usage.new_features
    t: Új funkciók
  - key: usage.new_features.question
    t: A közelmúltban és a közeljövőben megjelenő új funkciók közül melyik izgat a legjobban?

  - key: options.new_features.asset_loading
    t: Eszköz betöltése
  - key: options.new_features.asset_loading.description
    t: A Suspense teljes integrálása a stíluslapok, betűtípusok és képek betöltési ciklusával
  - key: options.new_features.cache.description
    t: Az adatok gyorsítótárazását segítő API.
  - key: options.new_features_react_forget.description
    t: A React automatikus reaktivitás fordítója
  - key: options.new_features.new_docs
    t: Új dokumentáció
  - key: options.new_features.new_docs.description
    t: A React frissített dokumentációs webhelye.
  - key: options.new_features.offscreen_rendering
    t: Megjelenítésmentes renderelés
  - key: options.new_features_offscreen_rendering.description
    t: Renderelés a háttérben, többletteljesítmény-ráfordítás nélkül.
  - key: options.new_features.use_hook
    t: >
      `use` horog
  - key: options.new_features.use_hook.description
    t: >
      `use` kibontja egy Promise értékét, de használható normál komponensek és horgokon belül, a kliens-oldalon is.

  - key: options.new_features.transition_tracing
    t: Átmenetek követése
  - key: options.new_features.transition_tracing.description
    t: Érzékeli, ha a React átmenetek lelassulnak és megvizsgálja, hogy miért történhetett.

  # what do you use React for?
  - key: options.what_do_you_use_react_for.static_sites
    t: Statikus oldalak
  - key: options.what_do_you_use_react_for.design_systems
    t: Dizájnrendszerek
  - key: options.what_do_you_use_react_for.web_apps
    t: Webappok
  - key: options.what_do_you_use_react_for.mobile_apps
    t: Mobil appok
  - key: options.what_do_you_use_react_for.desktop_apps
    t: Asztali appok

  # resources
  - key: resources.learning_methods_react
    t: Learning Methods
  - key: resources.learning_methods_react.question
    t: Milyen forrásokból tanultál először React-et?

  - key: resources.blogs_news_magazines_react
    t: Blogs & Newsletters
  - key: resources.blogs_news_magazines_react.question
    t: Which blogs, magazines, or newsletters do you consult to keep up with React news?

  - key: resources.sites_courses_react
    t: Sites & Courses
  - key: resources.sites_courses_react.question
    t: Which sites or courses have you used to learn React?

  - key: resources.podcasts_react
    t: Podcasts
  - key: resources.podcasts_react.question
    t: Which React or web development podcasts do you listen to?

  - key: resources.video_creators_react
    t: Video Creators
  - key: resources.video_creators_react.question
    t: Which React or web development video creators do you watch on YouTube, Twitch, etc.?

  - key: resources.people_react
    t: People
  - key: resources.people_react.question
    t: Who do you read, follow, or just want to highlight in the React community?
